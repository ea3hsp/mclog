// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: mclog.proto

package mclog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HermesServiceClient is the client API for HermesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HermesServiceClient interface {
	Log(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*LogRes, error)
}

type hermesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHermesServiceClient(cc grpc.ClientConnInterface) HermesServiceClient {
	return &hermesServiceClient{cc}
}

func (c *hermesServiceClient) Log(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*LogRes, error) {
	out := new(LogRes)
	err := c.cc.Invoke(ctx, "/mclog.HermesService/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HermesServiceServer is the server API for HermesService service.
// All implementations must embed UnimplementedHermesServiceServer
// for forward compatibility
type HermesServiceServer interface {
	Log(context.Context, *LogReq) (*LogRes, error)
	mustEmbedUnimplementedHermesServiceServer()
}

// UnimplementedHermesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHermesServiceServer struct {
}

func (UnimplementedHermesServiceServer) Log(context.Context, *LogReq) (*LogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedHermesServiceServer) mustEmbedUnimplementedHermesServiceServer() {}

// UnsafeHermesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HermesServiceServer will
// result in compilation errors.
type UnsafeHermesServiceServer interface {
	mustEmbedUnimplementedHermesServiceServer()
}

func RegisterHermesServiceServer(s grpc.ServiceRegistrar, srv HermesServiceServer) {
	s.RegisterService(&HermesService_ServiceDesc, srv)
}

func _HermesService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mclog.HermesService/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServiceServer).Log(ctx, req.(*LogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HermesService_ServiceDesc is the grpc.ServiceDesc for HermesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HermesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mclog.HermesService",
	HandlerType: (*HermesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _HermesService_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mclog.proto",
}
